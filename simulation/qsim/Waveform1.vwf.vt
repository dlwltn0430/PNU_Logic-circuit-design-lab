// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/19/2022 18:46:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          calculator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b0;
reg b000;
reg b1;
reg b2;
reg b3;
reg b4;
reg b5;
reg b6;
reg b7;
reg b111;
reg b222;
reg b333;
reg clk;
reg fifty;
reg grd1;
reg grd2;
reg grd3;
reg hundred;
reg output_button;
reg pin_name1;
reg pin_name2;
reg pin_name3;
reg pin_name4;
reg pin_name5;
reg pin_name6;
reg pin_name7;
reg pin_name8;
reg reset;
reg rst;
// wires                                               
wire a;
wire b;
wire C;
wire c23;
wire com6;
wire com7;
wire com8;
wire D;
wire d24;
wire e;
wire f;
wire g;
wire G0;
wire G1;
wire G2;
wire G3;
wire [3:0] R;
wire W;
wire X;
wire Y;

// assign statements (if any)                          
calculator i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.b0(b0),
	.b000(b000),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.b6(b6),
	.b7(b7),
	.b111(b111),
	.b222(b222),
	.b333(b333),
	.C(C),
	.c23(c23),
	.clk(clk),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.D(D),
	.d24(d24),
	.e(e),
	.f(f),
	.fifty(fifty),
	.g(g),
	.G0(G0),
	.G1(G1),
	.G2(G2),
	.G3(G3),
	.grd1(grd1),
	.grd2(grd2),
	.grd3(grd3),
	.hundred(hundred),
	.output_button(output_button),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.R(R),
	.reset(reset),
	.rst(rst),
	.W(W),
	.X(X),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// fifty
initial
begin
	fifty = 1'b1;
end 

// hundred
initial
begin
	hundred = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #850000 1'b1;
	reset = #40000 1'b0;
end 
endmodule

